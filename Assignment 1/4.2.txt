#include <bits/stdc++.h>
using namespace std;

class FamilyNode
{
public:
  vector<FamilyNode *> children;
  string name;
  // declare other members as per question's requirement
};

// Note:Input of nodes will be taken in order according to pre-order traversal of tree.
FamilyNode *buildTree()
{
  string name;
  cout << "Enter name of member" << endl;
  cin >> name;

  // Take other parameters as inputs

  int numOfChildren;
  cout << "Enter number of children" << endl;
  cin >> numOfChildren;

  FamilyNode *node = new FamilyNode();
  // Initialize the node

  for (int i = 0; i < numOfChildren; i++)
  {
    // Build tree rooted at child i. Add this to children vector of current node.
  }

  return node;
}

// NOTE:You can declare additional functions inorder to complete the tasks

void printUniqueOccupationMember(vector<FamilyNode *> &familyTrees)
{
  for (int i = 0; i < familyTrees.size(); i++)
  {
    // This map stores occupation name as key and count of nodes having current occupation as the value
    map<string, int> occupationToCount;
    // Complete the code here
  }
}

void printAverageIncomePerAgeGroup(vector<FamilyNode *> &familyTrees)
{
  // Complete the code here
}

void printRichestIndividualEachGeneration(vector<FamilyNode *> &familyTrees)
{
  for (int i = 0; i < familyTrees.size(); i++)
  {
    // Complete the code here
    // Declare a function which will do a level order traversal on current family node
    // The declared function should help you find highest income earner in each level
  }
}

// The function returns the ancestor of family having most diverse occupations
FamilyNode *getDiverseFamily(vector<FamilyNode *> &familyTrees)
{
  // result should store the ancestor node of family which is most diverse
  FamilyNode *result = NULL;
  int maxCount = -1;

  for (int i = 0; i < familyTrees.size(); i++)
  {
    // Complete the code here
  }

  // Return the ancestor node of family with highest income-to-age ratio
}

int main()
{
  int numOfFamilies;
  cout << "Enter the number of families\n";
  cin >> numOfFamilies;

  vector<FamilyNode *> familyTrees; // This vector stores ancestor nodes of all families

  for (int i = 0; i < numOfFamilies; i++)
  {
    familyTrees.push_back(buildTree());
  }

  while (1)
  {
    int choice;
    cout << "1. Find Member with Unique Occupation" << endl;
    cout << "2. Find Average income per Age group" << endl;
    cout << "3. Find Richest Individual of Each Generation" << endl;
    cout << "4. Print Family(Ancestor) Name which is most diverse" << endl;
    cout << "5. Exit" << endl;
    cout << "Enter your choice" << endl;

    cin >> choice;

    switch (choice)
    {
    case 1:
    {
      printUniqueOccupationMember(familyTrees);
      break;
    }
    case 2:
    {
      printAverageIncomePerAgeGroup(familyTrees);
      break;
    }
    case 3:
    {
      printRichestIndividualEachGeneration(familyTrees);
      break;
    }
    case 4:
    {
      FamilyNode *result = getDiverseFamily(familyTrees);
      cout << "Family of ancestor named " << result->name << " is most diverse" << endl;
      break;
    }
    case 5:
    {
      return 0;
      break;
    }
    default:
    {
      cout << "Incorrect choice!!!" << endl;
      break;
    }
    }
  }

  return 0;
}